{"is_source_file": true, "format": "JavaScript", "description": "This file defines a mock API module for simulating activity recommendations, scoring, and user feedback functions within a frontend project. It includes functions for deriving hero alignment labels, scoring activities based on team and quiz parameters, and exposing asynchronous API methods for fetching, saving, and providing feedback on activities.", "external_files": ["./mockData"], "external_methods": ["ACTIVITIES"], "published": ["getRecommendations", "saveRecommendation", "giveFeedback", "getSaved", "getFeedback"], "classes": [], "methods": [{"name": "deriveHero(a)", "description": "Determines a playful hero alignment label for an activity based on tags or hints.", "scope": "", "scopeKind": ""}, {"name": "scoreActivities({ team, quiz })", "description": "Scores a list of activities based on team and quiz parameters, prioritizing department relevance and other factors.", "scope": "", "scopeKind": ""}, {"name": "wait", "description": "Utility function for creating a delay, simulating asynchronous API calls."}, {"name": "getFeedback()", "scope": "mockApi", "scopeKind": "class", "description": "unavailable"}, {"name": "getRecommendations(payload)", "scope": "mockApi", "scopeKind": "class", "description": "unavailable"}, {"name": "getSaved()", "scope": "mockApi", "scopeKind": "class", "description": "unavailable"}, {"name": "giveFeedback(activityId, value)", "scope": "mockApi", "scopeKind": "class", "description": "unavailable"}, {"name": "saveRecommendation(item)", "scope": "mockApi", "scopeKind": "class", "description": "unavailable"}], "calls": ["wait(300)", "scoreActivities(payload)", "wait(150)", "saved.find", "ACTIVITIES.find", "feedback.push"], "search-terms": ["mockApi", "activity scoring", "recommendation functions", "mockData", "hero alignment"], "state": 2, "file_id": 28, "knowledge_revision": 130, "git_revision": "42f6abdf2bca17d59c03cc3b5fb56911a0fdcf6e", "revision_history": [{"61": ""}, {"125": "d35508435f254404c184c745e870f47cd83f6fb4"}, {"129": "2d04394afc157a1c8533ab3ec178cb1b474cc758"}, {"130": "42f6abdf2bca17d59c03cc3b5fb56911a0fdcf6e"}], "ctags": [{"_type": "tag", "name": "deriveHero", "path": "/home/kavia/workspace/code-generation/teamsync-engage-182304-182313/team_sync_frontend/src/mock/mockApi.js", "pattern": "/^function deriveHero(a) {$/", "language": "JavaScript", "kind": "function", "signature": "(a)"}, {"_type": "tag", "name": "feedback", "path": "/home/kavia/workspace/code-generation/teamsync-engage-182304-182313/team_sync_frontend/src/mock/mockApi.js", "pattern": "/^let feedback = [];$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "getFeedback", "path": "/home/kavia/workspace/code-generation/teamsync-engage-182304-182313/team_sync_frontend/src/mock/mockApi.js", "pattern": "/^  getFeedback() { return [...feedback]; }$/", "language": "JavaScript", "kind": "method", "signature": "()", "scope": "mockApi", "scopeKind": "class"}, {"_type": "tag", "name": "getRecommendations", "path": "/home/kavia/workspace/code-generation/teamsync-engage-182304-182313/team_sync_frontend/src/mock/mockApi.js", "pattern": "/^  async getRecommendations(payload) {$/", "language": "JavaScript", "kind": "method", "signature": "(payload)", "scope": "mockApi", "scopeKind": "class"}, {"_type": "tag", "name": "getSaved", "path": "/home/kavia/workspace/code-generation/teamsync-engage-182304-182313/team_sync_frontend/src/mock/mockApi.js", "pattern": "/^  getSaved() { return [...saved]; },$/", "language": "JavaScript", "kind": "method", "signature": "()", "scope": "mockApi", "scopeKind": "class"}, {"_type": "tag", "name": "giveFeedback", "path": "/home/kavia/workspace/code-generation/teamsync-engage-182304-182313/team_sync_frontend/src/mock/mockApi.js", "pattern": "/^  async giveFeedback(activityId, value) {$/", "language": "JavaScript", "kind": "method", "signature": "(activityId, value)", "scope": "mockApi", "scopeKind": "class"}, {"_type": "tag", "name": "mockApi", "path": "/home/kavia/workspace/code-generation/teamsync-engage-182304-182313/team_sync_frontend/src/mock/mockApi.js", "pattern": "/^const mockApi = {$/", "language": "JavaScript", "kind": "class"}, {"_type": "tag", "name": "saveRecommendation", "path": "/home/kavia/workspace/code-generation/teamsync-engage-182304-182313/team_sync_frontend/src/mock/mockApi.js", "pattern": "/^  async saveRecommendation(item) {$/", "language": "JavaScript", "kind": "method", "signature": "(item)", "scope": "mockApi", "scopeKind": "class"}, {"_type": "tag", "name": "saved", "path": "/home/kavia/workspace/code-generation/teamsync-engage-182304-182313/team_sync_frontend/src/mock/mockApi.js", "pattern": "/^let saved = [];$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "scoreActivities", "path": "/home/kavia/workspace/code-generation/teamsync-engage-182304-182313/team_sync_frontend/src/mock/mockApi.js", "pattern": "/^function scoreActivities({ team, quiz }) {$/", "language": "JavaScript", "kind": "function", "signature": "({ team, quiz })"}, {"_type": "tag", "name": "wait", "path": "/home/kavia/workspace/code-generation/teamsync-engage-182304-182313/team_sync_frontend/src/mock/mockApi.js", "pattern": "/^const wait = (ms) => new Promise((res) => setTimeout(res, ms));$/", "language": "JavaScript", "kind": "constant"}], "hash": "7e411917471a6037113f47b1d5f57101", "format-version": 4, "code-base-name": "team_sync_frontend", "filename": "team_sync_frontend/src/mock/mockApi.js", "fields": [{"name": "let feedback = [];", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "let saved = [];", "scope": "", "scopeKind": "", "description": "unavailable"}]}